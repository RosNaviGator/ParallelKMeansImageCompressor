
#include <opencv2/opencv.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <cmath>
#include <cstdint>
#include <filesystem>
#include <filesUtils.hpp>
#include <utilsCLI.hpp>

auto main() -> int
{
    UtilsCLI::decoderHeader();
    std::cout << "This is the Decoder to decode the .kc file generated by the Encoder, if you haven't already compressed a file by the Encoder this Decoder is not so useful" << '\n';
    std::cout << '\n';
    std::cout << '\n';
    std::string path;
    FilesUtils::createOutputDirectories();
    std::filesystem::path decodeDir;
    std::vector<std::filesystem::path> imageNames;
    FilesUtils::createDecodingMenu(decodeDir, imageNames);
    UtilsCLI::displayDecodingMenu(path, imageNames, decodeDir);
    std::cout << '\n';
    std::cout << '\n';
    // std::getline(std::cin, path); 
    std::cout << '\n';
    std::string answer = "d";
    while (answer != "y" && answer != "n")
    {
        UtilsCLI::decoderHeader();
        std::cout << "Do you want to save a copy .jpg of your Compressed Image? [y/n]"<< '\n';
        std::cout << '\n';
        std::cout << '\n';
        std::cin >> answer;
    }

    cv::Mat imageCompressed; 

    FilesUtils::readBinaryFile(path, imageCompressed);

    cv::cvtColor(imageCompressed, imageCompressed, cv::COLOR_YCrCb2BGR);

    if(answer == "y")
    {
        if (path.length() >= 3) {
        // Rimuovi gli ultimi 3 caratteri dalla stringa
        path.erase(path.length() - 3);
        }
        std::string outputPath = path + ".jpg";
        cv::imwrite(outputPath, imageCompressed);
    }
    UtilsCLI::workDone();
    std::cout << "Enjoy your Compressed Image!" << '\n';
    cv::imshow("Compressed Image", imageCompressed);
    cv::waitKey(0);


    std::string command = "sl";
    int result = system(command.c_str());
    if (result != 0)
    {
        std::cerr << "Error executing command: " << command << '\n';
    }
    return 0;
}